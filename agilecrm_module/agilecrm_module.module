<?php
/**
 * @file
 * Drupal Module: Google Analytics.
 *
 * Adds the required Javascript to all your Drupal pages to allow tracking by
 * the Google Analytics statistics package.
 *
 * @author: Alexander Hass <http://drupal.org/user/85918>
 */

use Drupal\Component\Serialization\Json;
use Drupal\Component\Utility\Crypt;
use Drupal\Component\Utility\Unicode;
use Drupal\Core\Cache\Cache;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Site\Settings;
use Drupal\Core\Url;
use Drupal\node\NodeInterface;
use GuzzleHttp\Exception\RequestException;
use Drupal\ckeditor\CKEditorPluginBase;
use Drupal\editor\Entity\Editor;

/**
 * Advertise the supported google analytics api details.
 */
function agilecrm_module_api() {
  return [
    'api' => 'analytics.js',
  ];
}

/**
 * Implements hook_page_attachments().
 *
 * Insert JavaScript to the appropriate scope/region of the page.
 */

function agilecrm_module_page_attachments(array &$page) {
  $account = \Drupal::currentUser();
  $config = \Drupal::config('agilecrm_module.settings');
  $id = $config->get('account');
  $request = \Drupal::request();
  $query = \Drupal::database()->select('agilecrm_module', 'u');
        $query->fields('u', ['agilecrm_module_id','setting_domain','setting_email','setting_password','setting_restapikey','setting_jsapikey','setting_webstats','setting_webrules']);
        $results = $query->execute()->fetchAll();
        foreach ($results as $k => $v) {  
                    $domain =  $v->setting_domain;
                    $email =  $v->setting_email; 
                    $password =  $v->setting_password; 
                    $restapi = $v->setting_restapikey;
                    $jsapikey = $v->setting_jsapikey;
                    $webstats = $v->setting_webstats;
                    $webrules = $v->setting_webrules;
           }

 // $status = get_http_header('Status'); /*deprecated in drupal 8*/
  $trackable_status_codes = [
    '403', // Forbidden
    '404', // Not Found
  ];
  
  // 1. Check if the GA account number has a valid value.
  // 2. Track page views based on visibility value.
  // 3. Check if we should track the currently active user's role.
  // 4. Ignore pages visibility filter for 404 or 403 status codes.

    //$route_name = \Drupal::request()->attributes->get('_route');
    //if ('system.404' === $route_name) {
      /* do something */
     // $url_custom = '"/404.html?page=" + document.location.pathname + document.location.search + "&from=" + document.referrer';
    //}
    
    if($webstats == '1' && $webrules == '1')
    {
    // Build tracker code.
    $script = '_agile.set_account("'.$jsapikey.'", "'.$domain.'"); _agile.track_page_view(); _agile_execute_web_rules();';
    } else if($webstats == '1'){
      $script = '_agile.set_account("'.$jsapikey.'", "'.$domain.'"); _agile.track_page_view();';
    }else if($webrules == '1'){
      $script = '_agile.set_account("'.$jsapikey.'", "'.$domain.'");_agile_execute_web_rules();';
    }else{
      $script = '_agile.set_account("'.$jsapikey.'", "'.$domain.'");';
    }
    // Add any custom code snippets if specified.
    $codesnippet_create = $config->get('codesnippet.create');
    $codesnippet_before = $config->get('codesnippet.before');
    $codesnippet_after = $config->get('codesnippet.after');

    $page['#attached']['html_head'][] = [
    // The data.
    [
      // The HTML tag to add, in this case a <script> tag.
      '#tag' => 'script',
      '#attributes' => array(
        'language' => "javascript",
        'type' => "text/javascript",
        'src' => "https://".$domain.".agilecrm.com/stats/min/agile-min.js",
      ),
      '#value' => '',
    ],
    // A key, to make it possible to recognize this HTML <HEAD> element when altering.
    'jquery-define'
  ];

  $page['#attached']['html_head'][] = [
      [
        '#tag' => 'script',
        '#value' => $script,
      ],
      'agilecrm_module_tracking_script',
    ];
 
}

/**
 * Generate user id hash to implement USER_ID.
 *
 * The USER_ID value should be a unique, persistent, and non-personally
 * identifiable string identifier that represents a user or signed-in
 * account across devices.
 *
 * @param int $uid
 *   User id.
 *
 * @return string
 *   User id hash.
 */
function agilecrm_module_user_id_hash($uid) {
  return Crypt::hmacBase64($uid, \Drupal::service('private_key')->get() . Settings::getHashSalt());
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function agilecrm_module_form_user_form_alter(&$form, FormStateInterface $form_state) {
  $config = \Drupal::config('agilecrm_module.settings');
  $account = $form_state->getFormObject()->getEntity();

  if ($account->hasPermission('opt-in or out of google analytics tracking') && ($visibility_user_account_mode = $config->get('visibility.user_account_mode')) != 0 && _agilecrm_module_visibility_roles($account)) {
    $account_data_agilecrm_module = \Drupal::service('user.data')->get('agilecrm_module', $account->id());

    $form['agilecrm_module'] = [
      '#type' => 'details',
      '#title' => t('Google Analytics settings'),
      '#weight' => 3,
      '#open' => TRUE,
    ];

    switch ($visibility_user_account_mode) {
      case 1:
        $description = t('Users are tracked by default, but you are able to opt out.');
        break;

      case 2:
        $description = t('Users are <em>not</em> tracked by default, but you are able to opt in.');
        break;
    }

    $form['agilecrm_module']['user_account_users'] = [
      '#type' => 'checkbox',
      '#title' => t('Enable user tracking'),
      '#description' => $description,
      '#default_value' => isset($account_data_agilecrm_module['user_account_users']) ? $account_data_agilecrm_module['user_account_users'] : ($visibility_user_account_mode == 1),
    ];

    // hook_user_update() is missing in D8, add custom submit handler.
    $form['actions']['submit']['#submit'][] = 'agilecrm_module_user_profile_form_submit';
  }
}

/**
 * Submit callback for user profile form to save the Google Analytics setting.
 */
function agilecrm_module_user_profile_form_submit($form, FormStateInterface $form_state) {
  $account = $form_state->getFormObject()->getEntity();
  if ($account->id() && $form_state->hasValue('user_account_users')) {
    \Drupal::service('user.data')->set('agilecrm_module', $account->id(), 'user_account_users', (int) $form_state->getValue('user_account_users'));
  }
}

/**
 * Implements hook_cron().
 */
function agilecrm_module_cron() {
  $config = \Drupal::config('agilecrm_module.settings');

  // Regenerate the tracking code file every day.
  if (REQUEST_TIME - \Drupal::state()->get('agilecrm_module.last_cache') >= 86400 && $config->get('cache')) {
    _agilecrm_module_cache('http://www.google-analytics.com/analytics.js', TRUE);
    \Drupal::state()->set('agilecrm_module.last_cache', REQUEST_TIME);
  }
}

/**
 * Implements hook_preprocess_item_list__search_results().
 *
 * Collects and adds the number of search results to the head.
 */
function agilecrm_module_preprocess_item_list__search_results(&$variables) {
  $config = \Drupal::config('agilecrm_module.settings');

  // Only run on search results list.
  if ($config->get('track.site_search')) {
    // There is no search result $variable available that hold the number of
    // items found. The variable $variables['items'] has the current page items
    // only. But the pager item mumber can tell the number of search results.
    global $pager_total_items;

    $variables['#attached']['html_head'][] = [
      [
        '#tag' => 'script',
        '#value' => 'window.agilecrm_module_search_results = ' . intval($pager_total_items[0]) . ';',
        '#weight' => JS_LIBRARY - 1,
      ],
      'agilecrm_module_search_script',
    ];
  }
}

/**
 * Download/Synchronize/Cache tracking code file locally.
 *
 * @param string $location
 *   The full URL to the external javascript file.
 * @param bool $synchronize
 *   Synchronize to local cache if remote file has changed.
 *
 * @return mixed
 *   The path to the local javascript file on success, boolean FALSE on failure.
 */
function _agilecrm_module_cache($location, $synchronize = FALSE) {
  $path = 'public://agilecrm_module';
  $file_destination = $path . '/' . basename($location);

  if (!file_exists($file_destination) || $synchronize) {
    // Download the latest tracking code.
    try {
      $data = \Drupal::httpClient()
        ->get($location)
        ->getBody(TRUE);

      if (file_exists($file_destination)) {
        // Synchronize tracking code and and replace local file if outdated.
        $data_hash_local = Crypt::hashBase64(file_get_contents($file_destination));
        $data_hash_remote = Crypt::hashBase64($data);
        // Check that the files directory is writable.
        if ($data_hash_local != $data_hash_remote && file_prepare_directory($path)) {
          // Save updated tracking code file to disk.
          file_unmanaged_save_data($data, $file_destination, FILE_EXISTS_REPLACE);
          \Drupal::logger('agilecrm_module')->info('Locally cached tracking code file has been updated.');

          // Change query-strings on css/js files to enforce reload for all
          // users.
          _drupal_flush_css_js();
        }
      }
      else {
        // Check that the files directory is writable.
        if (file_prepare_directory($path, FILE_CREATE_DIRECTORY)) {
          // There is no need to flush JS here as core refreshes JS caches
          // automatically, if new files are added.
          file_unmanaged_save_data($data, $file_destination, FILE_EXISTS_REPLACE);
          \Drupal::logger('agilecrm_module')->info('Locally cached tracking code file has been saved.');

          // Return the local JS file path.
          return file_url_transform_relative(file_create_url($file_destination));
        }
      }
    }
    catch (RequestException $exception) {
      watchdog_exception('agilecrm_module', $exception);
    }
  }
  else {
    // Return the local JS file path.
    return file_url_transform_relative(file_create_url($file_destination));
  }
}

/**
 * Delete cached files and directory.
 */
function agilecrm_module_clear_js_cache() {
  $path = 'public://agilecrm_module';
  if (file_prepare_directory($path)) {
    file_scan_directory($path, '/.*/', ['callback' => 'file_unmanaged_delete']);
    drupal_rmdir($path);

    // Change query-strings on css/js files to enforce reload for all users.
    _drupal_flush_css_js();

    \Drupal::logger('agilecrm_module')->info('Local cache has been purged.');
  }
}

/**
 * Tracking visibility check for an user object.
 *
 * @param object $account
 *   A user object containing an array of roles to check.
 *
 * @return bool
 *   TRUE if the current user is being tracked by Google Analytics,
 *   otherwise FALSE.
 */
function _agilecrm_module_visibility_user($account) {
  $config = \Drupal::config('agilecrm_module.settings');
  $enabled = FALSE;

  // Is current user a member of a role that should be tracked?
  if (_agilecrm_module_visibility_roles($account)) {

    // Use the user's block visibility setting, if necessary.
    if (($visibility_user_account_mode = $config->get('visibility.user_account_mode')) != 0) {
      $user_data_agilecrm_module = \Drupal::service('user.data')->get('agilecrm_module', $account->id());
      if ($account->id() && isset($user_data_agilecrm_module['user_account_users'])) {
        $enabled = $user_data_agilecrm_module['user_account_users'];
      }
      else {
        $enabled = ($visibility_user_account_mode == 1);
      }
    }
    else {
      $enabled = TRUE;
    }

  }

  return $enabled;
}

/**
 * Tracking visibility check for user roles.
 *
 * Based on visibility setting this function returns TRUE if JS code should
 * be added for the current role and otherwise FALSE.
 *
 * @param object $account
 *   A user object containing an array of roles to check.
 *
 * @return bool
 *   TRUE if JS code should be added for the current role and otherwise FALSE.
 */
function _agilecrm_module_visibility_roles($account) {
  $config = \Drupal::config('agilecrm_module.settings');
  $enabled = $visibility_user_role_mode = $config->get('visibility.user_role_mode');
  $visibility_user_role_roles = $config->get('visibility.user_role_roles');

  if (count($visibility_user_role_roles) > 0) {
    // One or more roles are selected.
    foreach (array_values($account->getRoles()) as $user_role) {
      // Is the current user a member of one of these roles?
      if (in_array($user_role, $visibility_user_role_roles)) {
        // Current user is a member of a role that should be tracked/excluded
        // from tracking.
        $enabled = !$visibility_user_role_mode;
        break;
      }
    }
  }
  else {
    // No role is selected for tracking, therefore all roles should be tracked.
    $enabled = TRUE;
  }

  return $enabled;
}

/**
 * Tracking visibility check for pages.
 *
 * Based on visibility setting this function returns TRUE if JS code should
 * be added to the current page and otherwise FALSE.
 */
function _agilecrm_module_visibility_pages() {
  static $page_match;

  // Cache visibility result if function is called more than once.
  if (!isset($page_match)) {
    $config = \Drupal::config('agilecrm_module.settings');
    $visibility_request_path_mode = $config->get('visibility.request_path_mode');
    $visibility_request_path_pages = $config->get('visibility.request_path_pages');

    // Match path if necessary.
    if (!empty($visibility_request_path_pages)) {
      // Convert path to lowercase. This allows comparison of the same path
      // with different case. Ex: /Page, /page, /PAGE.
      $pages = Unicode::strtolower($visibility_request_path_pages);
      if ($visibility_request_path_mode < 2) {
        // Compare the lowercase path alias (if any) and internal path.
        $path = \Drupal::service('path.current')->getPath();
        $path_alias = Unicode::strtolower(\Drupal::service('path.alias_manager')->getAliasByPath($path));
        $page_match = \Drupal::service('path.matcher')->matchPath($path_alias, $pages) || (($path != $path_alias) && \Drupal::service('path.matcher')->matchPath($path, $pages));
        // When $visibility_request_path_mode has a value of 0, the tracking
        // code is displayed on all pages except those listed in $pages. When
        // set to 1, it is displayed only on those pages listed in $pages.
        $page_match = !($visibility_request_path_mode xor $page_match);
      }
      elseif (\Drupal::moduleHandler()->moduleExists('php')) {
        $page_match = php_eval($visibility_request_path_pages);
      }
      else {
        $page_match = FALSE;
      }
    }
    else {
      $page_match = TRUE;
    }

  }
  return $page_match;
}

function agilecrm_module_ckeditor_plugin_info_alter(array &$plugins) {
  $plugins['imagepopup'] = array(
    'id' => 'imagepopup',
    'label' => t('Insert image popup'),
    'module' => 'agilecrm_module',
    'class' => 'Drupal\agilecrm_module\Plugin\CKEditorPlugin\ImagePopup',
    'provider' => 'agilecrm_module',
  );
}


function agilecrm_module_node_view(&$build, $node, $display, $view_mode) {
   $config = \Drupal::config('agilecrm_module.settings');
  $id = $config->get('account');
  $request = \Drupal::request();
  $query = \Drupal::database()->select('agilecrm_module', 'u');
        $query->fields('u', ['agilecrm_module_id','setting_domain','setting_email','setting_password','setting_restapikey','setting_jsapikey']);
        $results = $query->execute()->fetchAll();
        foreach ($results as $k => $v) {  
                    $domain =  $v->setting_domain;
                    $email =  $v->setting_email; 
                    $password =  $v->setting_password; 
                    $restapi = $v->setting_restapikey;
                    $jsapikey = $v->setting_jsapikey;
           }
            $url = $_SERVER['REQUEST_URI'];
            $num = intval(substr($url, strrpos($url, '/') + 1));
            $node = \Drupal\node\Entity\Node::load($num);
            preg_match_all('/{agilelandingpage_id}(.*?){\/agilelandingpage_id}/is',$node->body->value,$matches);
            $i=0;
             foreach($matches[0] as $match){
                $usrname=$matches[1][$i];
                $usrname = strip_tags($usrname);
                $textout = $usrname;
                $i++;
              }
            if($domain != "" && $email != "" && $restapi != "" && $textout != "") {
                echo file_get_contents('https://'.$domain.'.agilecrm.com/landing/'.$textout);
                die();
            }
}

/**
 * Implements hook_toolbar().
 */
function agilecrm_module_toolbar(&$items) {

  $items = array();

  $items['agilecrm_module'] = array(
    '#type' => 'toolbar_item',
    '#attached' => array(
      'library' => array('agilecrm_module/agilecrm_module.icons',),
    ),
  );

  return $items;
}
function agilecrm_module_theme($existing, $type, $theme, $path) {
  return array(
    'webrules-page' => array(
      'variables' => array('test_var' => NULL,'domain' => NULL,'email' => NULL,'password' => NULL,'restapi' => NULL),
    ),
    'formbuilder-page' => array(
      'variables' => array('test_var' => NULL,'domain' => NULL,'email' => NULL,'password' => NULL,'restapi' => NULL),
    ),
    'landing-page' => array(
      'variables' => array('test_var' => NULL,'domain' => NULL,'email' => NULL,'password' => NULL,'restapi' => NULL),
    ),
    'email-page' => array(
      'variables' => array('test_var' => NULL,'domain' => NULL,'email' => NULL,'password' => NULL,'restapi' => NULL),
    ),
    'webstats-page' => array(
      'variables' => array('test_var' => NULL,'domain' => NULL,'email' => NULL,'password' => NULL,'restapi' => NULL),
    ),
    'home-page' => array(
      'variables' => array('webstats' => NULL,'webrules' => NULL,'email' => NULL,'password' => NULL,'restapi' => NULL),
    ),
  );
}
?>